!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$FZF_DEFAULT_COMMAND	init.vim	/^        let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'$/;"	v
$FZF_DEFAULT_COMMAND	init.vim	/^        let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git\/*"'$/;"	v
$FZF_DEFAULT_COMMAND	init.vim	/^let $FZF_DEFAULT_COMMAND =  "find * -path '*\/\\.*' -prune -o -path 'node_modules\/**' -prune -o/;"	v
0	coc-settings.json	/^                                                "pycodestyle"$/;"	s	array:languageserver.python.settings.pyls.configurationSources
0	coc-settings.json	/^                                "-mpyls",$/;"	s	array:languageserver.python.args
0	coc-settings.json	/^                                "python"$/;"	s	array:languageserver.python.filetypes
0	coc-settings.json	/^                        "args": ["-jar", "\/home\/dieraca\/.languageservers\/texlab\/build\/libs/;"	s	array:languageserver.latex.args
0	coc-settings.json	/^                        "args": ["start"],$/;"	s	array:languageserver.bash.args
0	coc-settings.json	/^                        "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
0	coc-settings.json	/^                        "filetypes": ["go"],$/;"	s	array:languageserver.golang.filetypes
0	coc-settings.json	/^                        "filetypes": ["sh"],$/;"	s	array:languageserver.bash.filetypes
0	coc-settings.json	/^                        "filetypes": ["tex", "bib", "plaintex", "context"]$/;"	s	array:languageserver.latex.filetypes
0	coc-settings.json	/^                        "filetypes": ["vim", "markdown"]$/;"	s	array:languageserver.efm.filetypes
0	coc-settings.json	/^                        "ignoredRootPaths": ["~"]$/;"	s	array:languageserver.bash.ignoredRootPaths
0	coc-settings.json	/^                        "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", "/;"	s	array:languageserver.ccls.rootPatterns
0	coc-settings.json	/^        "coc.preferences.formatOnSaveFiletypes": ["rust", "python", "c", "Markdown", "golang"],$/;"	s	array:coc.preferences.formatOnSaveFiletypes
1	coc-settings.json	/^                                "-vv",$/;"	s	array:languageserver.python.args
1	coc-settings.json	/^                        "args": ["-jar", "\/home\/dieraca\/.languageservers\/texlab\/build\/libs/;"	s	array:languageserver.latex.args
1	coc-settings.json	/^                        "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
1	coc-settings.json	/^                        "filetypes": ["tex", "bib", "plaintex", "context"]$/;"	s	array:languageserver.latex.filetypes
1	coc-settings.json	/^                        "filetypes": ["vim", "markdown"]$/;"	s	array:languageserver.efm.filetypes
1	coc-settings.json	/^                        "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", "/;"	s	array:languageserver.ccls.rootPatterns
1	coc-settings.json	/^        "coc.preferences.formatOnSaveFiletypes": ["rust", "python", "c", "Markdown", "golang"],$/;"	s	array:coc.preferences.formatOnSaveFiletypes
2	coc-settings.json	/^                                "--log-file",$/;"	s	array:languageserver.python.args
2	coc-settings.json	/^                        "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
2	coc-settings.json	/^                        "filetypes": ["tex", "bib", "plaintex", "context"]$/;"	s	array:languageserver.latex.filetypes
2	coc-settings.json	/^                        "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", "/;"	s	array:languageserver.ccls.rootPatterns
2	coc-settings.json	/^        "coc.preferences.formatOnSaveFiletypes": ["rust", "python", "c", "Markdown", "golang"],$/;"	s	array:coc.preferences.formatOnSaveFiletypes
3	coc-settings.json	/^                                "\/tmp\/lsp_python.log"$/;"	s	array:languageserver.python.args
3	coc-settings.json	/^                        "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	s	array:languageserver.ccls.filetypes
3	coc-settings.json	/^                        "filetypes": ["tex", "bib", "plaintex", "context"]$/;"	s	array:languageserver.latex.filetypes
3	coc-settings.json	/^                        "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", "/;"	s	array:languageserver.ccls.rootPatterns
3	coc-settings.json	/^        "coc.preferences.formatOnSaveFiletypes": ["rust", "python", "c", "Markdown", "golang"],$/;"	s	array:coc.preferences.formatOnSaveFiletypes
4	coc-settings.json	/^                        "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", "/;"	s	array:languageserver.ccls.rootPatterns
4	coc-settings.json	/^        "coc.preferences.formatOnSaveFiletypes": ["rust", "python", "c", "Markdown", "golang"],$/;"	s	array:coc.preferences.formatOnSaveFiletypes
<C-l>	init.vim	/^inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u$/;"	m
<C-m>	init.vim	/^map <C-m> :tabedit<cr>$/;"	m
<C-x>	init.vim	/^map <C-x> :Neoformat<CR>$/;"	m
<C-z>	init.vim	/^inoremap <C-z> <Esc>: silent exec '.!inkscape-figures create "'.getline('.').'" "'.b:vimtex.root/;"	m
<C-z>	init.vim	/^nnoremap <C-z> : silent exec '!inkscape-figures edit "'.b:vimtex.root.'\/figures\/" > \/dev\/nul/;"	m
<LeftRelease>	init.vim	/^vnoremap <LeftRelease> "*ygv$/;"	m
<leader>a	init.vim	/^nnoremap <silent> <leader>a  :<C-u>CocList diagnostics<cr>$/;"	m
<leader>bD	init.vim	/^map <leader>bD :Bclose!<cr>$/;"	m
<leader>bD	init.vim	/^map <leader>bD :bdelete!<cr>$/;"	m
<leader>bN	init.vim	/^map <leader>bN :FZF<cr>$/;"	m
<leader>bb	init.vim	/^map <leader>bb :Buffers<cr>$/;"	m
<leader>bd	init.vim	/^map <leader>bd :bdelete<cr>$/;"	m
<leader>bd	init.vim	/^map <leader>bd :q<cr>$/;"	m
<leader>bl	init.vim	/^map <leader>bl :Lines<cr>$/;"	m
<leader>bm	init.vim	/^map <leader>bm :Marks<cr>$/;"	m
<leader>bn	init.vim	/^map <leader>bn :bn<cr>$/;"	m
<leader>bn	init.vim	/^map <leader>bn :tabnext<cr>$/;"	m
<leader>bp	init.vim	/^map <leader>bp :bp<cr>$/;"	m
<leader>bp	init.vim	/^map <leader>bp :tabprevious<cr>$/;"	m
<leader>bt	init.vim	/^map <leader>bt :BTags<cr>$/;"	m
<leader>c	init.vim	/^nnoremap <silent> <leader>c  :<C-u>CocList commands<cr>$/;"	m
<leader>d	init.vim	/^nmap <silent> <leader>d <Plug>(coc-definition)$/;"	m
<leader>e	init.vim	/^nnoremap <silent> <leader>e  :<C-u>CocList extensions<cr>$/;"	m
<leader>gT	init.vim	/^map <leader>gT gT$/;"	m
<leader>gg	init.vim	/^map <leader>gg :Ag<cr>$/;"	m
<leader>gt	init.vim	/^map <leader>gt gt$/;"	m
<leader>i	init.vim	/^nmap <silent> <leader>i <Plug>(coc-implementation)$/;"	m
<leader>l	init.vim	/^nmap <leader>l :Format<cr>$/;"	m
<leader>mb	init.vim	/^map <leader>mb :VimtexCompile<cr>$/;"	m
<leader>o	init.vim	/^nnoremap <silent> <leader>o  :<C-u>CocList outline<cr>$/;"	m
<leader>p	init.vim	/^nnoremap <silent> <leader>p  :<C-u>CocListResume<CR>$/;"	m
<leader>qq	init.vim	/^nmap <leader>qq  <Plug>(coc-fix-current)$/;"	m
<leader>r	init.vim	/^nmap <silent> <leader>r <Plug>(coc-references)$/;"	m
<leader>s	init.vim	/^nnoremap <silent> <leader>s  :<C-u>CocList -I symbols<cr>$/;"	m
<leader>td	init.vim	/^nmap <silent> <leader>td <Plug>(coc-type-definition)$/;"	m
<leader>tn	init.vim	/^map <leader>tn :tab term<cr> A$/;"	m
<leader>ts	init.vim	/^map <leader>ts :split<cr> :terminal<cr> A$/;"	m
<leader>tv	init.vim	/^map <leader>tv :vsplit<cr> :terminal<cr> A$/;"	m
<leader>wd	init.vim	/^map <leader>wd :q<cr>$/;"	m
<leader>wh	init.vim	/^map <leader>wh :wincmd h<cr>$/;"	m
<leader>wj	init.vim	/^map <leader>wj :wincmd j<cr>$/;"	m
<leader>wk	init.vim	/^map <leader>wk :wincmd k<cr>$/;"	m
<leader>wl	init.vim	/^map <leader>wl :wincmd l<cr>$/;"	m
<leader>ws	init.vim	/^map <leader>ws :sp<cr>$/;"	m
<leader>wv	init.vim	/^map <leader>wv :vs<cr>$/;"	m
Find	init.vim	/^        command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading -/;"	c
Format	init.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
InitializeDirectories	init.vim	/^function! InitializeDirectories()$/;"	f
K	init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
[c	init.vim	/^nmap <silent> [c <Plug>(coc-diagnostic-prev)$/;"	m
]c	init.vim	/^nmap <silent> ]c <Plug>(coc-diagnostic-next)$/;"	m
all_scopes	coc-settings.json	/^                                                        "all_scopes": true$/;"	b	object:languageserver.python.settings.pyls.plugins.jedi_symbols
args	coc-settings.json	/^                        "args": ["-jar", "\/home\/dieraca\/.languageservers\/texlab\/build\/libs/;"	a	object:languageserver.latex
args	coc-settings.json	/^                        "args": ["start"],$/;"	a	object:languageserver.bash
args	coc-settings.json	/^                        "args": [$/;"	a	object:languageserver.python
args	coc-settings.json	/^                        "args": [],$/;"	a	object:languageserver.efm
bash	coc-settings.json	/^                "bash": {$/;"	o	object:languageserver
cache	coc-settings.json	/^                                "cache": {$/;"	o	object:languageserver.ccls.initializationOptions
ccls	coc-settings.json	/^                "ccls": {$/;"	o	object:languageserver
coc.preferences.formatOnSaveFiletypes	coc-settings.json	/^        "coc.preferences.formatOnSaveFiletypes": ["rust", "python", "c", "Markdown", "golang"],$/;"	a
coc.source.around.enable	coc-settings.json	/^        "coc.source.around.enable": true,$/;"	b
coc.source.around.priority	coc-settings.json	/^        "coc.source.around.priority":0,$/;"	n
coc.source.buffer.enable	coc-settings.json	/^        "coc.source.buffer.enable": true,$/;"	b
coc.source.buffer.priority	coc-settings.json	/^        "coc.source.buffer.priority":0,$/;"	n
coc.source.file.enable	coc-settings.json	/^        "coc.source.file.enable": true,$/;"	b
coc.source.file.priority	coc-settings.json	/^        "coc.source.file.priority":0,$/;"	n
coc.source.vimtex	coc-settings.json	/^        "coc.source.vimtex":true,$/;"	b
command	coc-settings.json	/^                        "command": "\/home\/dieraca\/.languageservers\/bash-language-server\/ser/;"	s	object:languageserver.bash
command	coc-settings.json	/^                        "command": "ccls",$/;"	s	object:languageserver.ccls
command	coc-settings.json	/^                        "command": "efm-langserver",$/;"	s	object:languageserver.efm
command	coc-settings.json	/^                        "command": "go-langserver",$/;"	s	object:languageserver.golang
command	coc-settings.json	/^                        "command": "java",$/;"	s	object:languageserver.latex
command	coc-settings.json	/^                        "command": "python3.6",$/;"	s	object:languageserver.python
commandPath	coc-settings.json	/^                                        "commandPath": "",$/;"	s	object:languageserver.python.settings.pyls
configurationSources	coc-settings.json	/^                                        "configurationSources": [$/;"	a	object:languageserver.python.settings.pyls
diagnosticsEnabled	coc-settings.json	/^                                "diagnosticsEnabled": true,$/;"	b	object:languageserver.golang.initializationOptions
directory	coc-settings.json	/^                                        "directory": "\/tmp\/ccls"$/;"	s	object:languageserver.ccls.initializationOptions.cache
efm	coc-settings.json	/^                "efm": {$/;"	o	object:languageserver
enable	coc-settings.json	/^                                        "enable": true,$/;"	b	object:languageserver.python.settings.pyls
enabled	coc-settings.json	/^                                                        "enabled": false,$/;"	b	object:languageserver.python.settings.pyls.plugins.pydocstyle
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.jedi_completion
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.jedi_hover
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.jedi_references
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.jedi_signature_help
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.preload
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.pycodestyle
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.pyflakes
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.rope_completion
enabled	coc-settings.json	/^                                                        "enabled": true$/;"	b	object:languageserver.python.settings.pyls.plugins.yapf
enabled	coc-settings.json	/^                                                        "enabled": true,$/;"	b	object:languageserver.python.settings.pyls.plugins.jedi_symbols
enabled	coc-settings.json	/^                                                        "enabled": true,$/;"	b	object:languageserver.python.settings.pyls.plugins.mccabe
filetypes	coc-settings.json	/^                        "filetypes": ["c", "cpp", "objc", "objcpp"],$/;"	a	object:languageserver.ccls
filetypes	coc-settings.json	/^                        "filetypes": ["go"],$/;"	a	object:languageserver.golang
filetypes	coc-settings.json	/^                        "filetypes": ["sh"],$/;"	a	object:languageserver.bash
filetypes	coc-settings.json	/^                        "filetypes": ["tex", "bib", "plaintex", "context"]$/;"	a	object:languageserver.latex
filetypes	coc-settings.json	/^                        "filetypes": ["vim", "markdown"]$/;"	a	object:languageserver.efm
filetypes	coc-settings.json	/^                        "filetypes": [$/;"	a	object:languageserver.python
g:UltiSnipsExpandTrigger	init.vim	/^let g:UltiSnipsExpandTrigger='<c-h>'$/;"	v
g:UltiSnipsJumpBackwardTrigger	init.vim	/^let g:UltiSnipsJumpBackwardTrigger='<c-g>'$/;"	v
g:UltiSnipsJumpForwardTrigger	init.vim	/^let g:UltiSnipsJumpForwardTrigger='<c-h>'$/;"	v
g:UltiSnipsSnippetDirectories	init.vim	/^let g:UltiSnipsSnippetDirectories=['UltiSnips', '\/home\/dieraca\/.config\/nvim\/snippets\/UltiS/;"	v
g:airline#extensions#coc#enabled	init.vim	/^let g:airline#extensions#coc#enabled = 1$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_left_sep	init.vim	/^let g:airline_left_sep = '»'$/;"	v
g:airline_left_sep	init.vim	/^let g:airline_left_sep = '▶'$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:airline_right_sep	init.vim	/^let g:airline_right_sep = '«'$/;"	v
g:airline_right_sep	init.vim	/^let g:airline_right_sep = '◀'$/;"	v
g:airline_symbols	init.vim	/^    let g:airline_symbols = {}$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.branch = '⎇'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.linenr = '¶'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.linenr = '␊'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.linenr = '␤'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.paste = 'Þ'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.paste = 'ρ'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.paste = '∥'$/;"	v
g:airline_symbols	init.vim	/^let g:airline_symbols.whitespace = 'Ξ'$/;"	v
g:airline_theme	init.vim	/^let g:airline_theme='onedark'$/;"	v
g:colorizer_auto_color	init.vim	/^let g:colorizer_auto_color=1$/;"	v
g:deoplete#enable_at_startup	init.vim	/^let g:deoplete#enable_at_startup=1$/;"	v
g:neoformat_basic_format_align	init.vim	/^let g:neoformat_basic_format_align = 1$/;"	v
g:neoformat_basic_format_retab	init.vim	/^let g:neoformat_basic_format_retab = 1$/;"	v
g:neoformat_basic_format_trim	init.vim	/^let g:neoformat_basic_format_trim = 1$/;"	v
g:neoformat_c_clang_format	init.vim	/^let g:neoformat_c_clang_format = {$/;"	v
g:neoformat_cpp_clang_format	init.vim	/^let g:neoformat_cpp_clang_format = {$/;"	v
g:neoformat_enabled_c	init.vim	/^let g:neoformat_enabled_c = ['clangformat']$/;"	v
g:neoformat_enabled_cpp	init.vim	/^let g:neoformat_enabled_cpp = ['clangformat']$/;"	v
g:neoformat_verbose	init.vim	/^let g:neoformat_verbose = 1$/;"	v
g:omni_sql_no_default_maps	init.vim	/^let g:omni_sql_no_default_maps = 1$/;"	v
g:polyglot_disabled	init.vim	/^let g:polyglot_disabled = ['latex']$/;"	v
g:python3_host_prog	init.vim	/^let g:python3_host_prog = '\/usr\/bin\/python3.6'$/;"	v
g:python_host_prog	init.vim	/^let g:python_host_prog = '\/usr\/bin\/python2'$/;"	v
g:rainbow_active	init.vim	/^let g:rainbow_active = 1$/;"	v
g:rustfmt_autosave	init.vim	/^let g:rustfmt_autosave = 1$/;"	v
g:scratch_dir	init.vim	/^        let g:scratch_dir = common_dir . 'scratch'. '\/'$/;"	v
g:ss_auto_exit	init.vim	/^let g:ss_auto_exit=0$/;"	v
g:tex_conceal	init.vim	/^let g:tex_conceal='abdmg'$/;"	v
g:tex_flavor	init.vim	/^let g:tex_flavor='latex'$/;"	v
g:update_daily	init.vim	/^let g:update_daily = 'PU'$/;"	v
g:vimtex_compiler_progname	init.vim	/^let g:vimtex_compiler_progname='nvr'$/;"	v
g:vimtex_complete_close_braces	init.vim	/^let g:vimtex_complete_close_braces = 1$/;"	v
g:vimtex_complete_enabled	init.vim	/^let g:vimtex_complete_enabled = 1$/;"	v
g:vimtex_complete_ignore_case	init.vim	/^let g:vimtex_complete_ignore_case = 1$/;"	v
g:vimtex_complete_smart_case	init.vim	/^let g:vimtex_complete_smart_case = 1$/;"	v
g:vimtex_quickfix_mode	init.vim	/^let g:vimtex_quickfix_mode=0$/;"	v
g:vimtex_view_method	init.vim	/^let g:vimtex_view_method='zathura'$/;"	v
ga	init.vim	/^nmap ga <Plug>(EasyAlign)$/;"	m
ga	init.vim	/^xmap ga <Plug>(EasyAlign)$/;"	m
gocodeCompletionEnabled	coc-settings.json	/^                                "gocodeCompletionEnabled": true,$/;"	b	object:languageserver.golang.initializationOptions
golang	coc-settings.json	/^                "golang": {$/;"	o	object:languageserver
html.enable	coc-settings.json	/^        "html.enable":true,$/;"	b
ignoredRootPaths	coc-settings.json	/^                        "ignoredRootPaths": ["~"]$/;"	a	object:languageserver.bash
initializationOptions	coc-settings.json	/^                        "initializationOptions": {$/;"	o	object:languageserver.ccls
initializationOptions	coc-settings.json	/^                        "initializationOptions": {$/;"	o	object:languageserver.golang
j	init.vim	/^nnoremap j gj$/;"	m
jedi_completion	coc-settings.json	/^                                                "jedi_completion": {$/;"	o	object:languageserver.python.settings.pyls.plugins
jedi_hover	coc-settings.json	/^                                                "jedi_hover": {$/;"	o	object:languageserver.python.settings.pyls.plugins
jedi_references	coc-settings.json	/^                                                "jedi_references": {$/;"	o	object:languageserver.python.settings.pyls.plugins
jedi_signature_help	coc-settings.json	/^                                                "jedi_signature_help": {$/;"	o	object:languageserver.python.settings.pyls.plugins
jedi_symbols	coc-settings.json	/^                                                "jedi_symbols": {$/;"	o	object:languageserver.python.settings.pyls.plugins
k	init.vim	/^nnoremap k gk$/;"	m
languageserver	coc-settings.json	/^        "languageserver": {$/;"	o
latex	coc-settings.json	/^                "latex": {$/;"	o	object:languageserver
lintTool	coc-settings.json	/^                                "lintTool": "golint"$/;"	s	object:languageserver.golang.initializationOptions
mapleader	init.vim	/^let mapleader = "\\<SPACE>"$/;"	v
match	coc-settings.json	/^                                                        "match": "(?!test_).*\\\\.py",$/;"	s	object:languageserver.python.settings.pyls.plugins.pydocstyle
matchDir	coc-settings.json	/^                                                        "matchDir": "[^\\\\.].*"$/;"	s	object:languageserver.python.settings.pyls.plugins.pydocstyle
mccabe	coc-settings.json	/^                                                "mccabe": {$/;"	o	object:languageserver.python.settings.pyls.plugins
plugins	coc-settings.json	/^                                        "plugins": {$/;"	o	object:languageserver.python.settings.pyls
preload	coc-settings.json	/^                                                "preload": {$/;"	o	object:languageserver.python.settings.pyls.plugins
pycodestyle	coc-settings.json	/^                                                "pycodestyle": {$/;"	o	object:languageserver.python.settings.pyls.plugins
pydocstyle	coc-settings.json	/^                                                "pydocstyle": {$/;"	o	object:languageserver.python.settings.pyls.plugins
pyflakes	coc-settings.json	/^                                                "pyflakes": {$/;"	o	object:languageserver.python.settings.pyls.plugins
pyls	coc-settings.json	/^                                "pyls": {$/;"	o	object:languageserver.python.settings
python	coc-settings.json	/^                "python": {$/;"	o	object:languageserver
rootPatterns	coc-settings.json	/^                        "rootPatterns": [".ccls", "compile_commands.json", ".vim\/", ".git\/", "/;"	a	object:languageserver.ccls
rope_completion	coc-settings.json	/^                                                "rope_completion": {$/;"	o	object:languageserver.python.settings.pyls.plugins
rust-client.logToFile	coc-settings.json	/^        "rust-client.logToFile":true,$/;"	b
rust.show_hover_context	coc-settings.json	/^        "rust.show_hover_context": true,$/;"	b
rust.show_warnings	coc-settings.json	/^        "rust.show_warnings":true,$/;"	b
s:first_run	init.vim	/^    let s:first_run = 1$/;"	v
s:first_run	init.vim	/^let s:first_run = 0$/;"	v
s:show_documentation	init.vim	/^function! s:show_documentation()$/;"	f
s:vim_plug	init.vim	/^let s:vim_plug = '~\/.vim\/autoload\/plug.vim'$/;"	v
server	coc-settings.json	/^                                                "server": "verbose"$/;"	s	object:languageserver.python.settings.pyls.trace
settings	coc-settings.json	/^                        "settings": {$/;"	o	object:languageserver.python
suggest.timeout	coc-settings.json	/^        "suggest.timeout": 500,$/;"	n
suggest.triggerAfterInsertEnter	coc-settings.json	/^        "suggest.triggerAfterInsertEnter": true,$/;"	b
threshold	coc-settings.json	/^                                                        "threshold": 15$/;"	n	object:languageserver.python.settings.pyls.plugins.mccabe
trace	coc-settings.json	/^                                        "trace": {$/;"	o	object:languageserver.python.settings.pyls
trace.server	coc-settings.json	/^                        "trace.server": "verbose",$/;"	s	object:languageserver.python
yapf	coc-settings.json	/^                                                "yapf": {$/;"	o	object:languageserver.python.settings.pyls.plugins
